{"ast":null,"code":"// constants\nimport { USER_LOGIN_FAILURE, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT } from \"../constants\"; // types\n\nlet user = null; // check if user exists in the storages\n\nconst userStorage = localStorage.getItem(\"user\") || sessionStorage.getItem(\"user\"); // if user does not exists user = null\n\nuser = userStorage ? JSON.parse(userStorage) : null;\nconst initState = user ? {\n  loggedIn: true,\n  user\n} : {}; // authentication reducer\n\nconst authentication = (state = initState, action) => {\n  switch (action.type) {\n    case USER_LOGIN_REQUEST:\n      return {\n        loggingIn: true\n      };\n\n    case USER_LOGIN_SUCCESS:\n      return {\n        loggedIn: true,\n        user: action.payload\n      };\n\n    case USER_LOGIN_FAILURE:\n      return {\n        loggedIn: false,\n        error: action.payload\n      };\n\n    case USER_LOGOUT:\n      return {\n        loggedIn: false\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default authentication;","map":{"version":3,"sources":["/mnt/sda1/Documents/react-redux-login-signup-form/src/reducers/authentication.reducer.ts"],"names":["USER_LOGIN_FAILURE","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","user","userStorage","localStorage","getItem","sessionStorage","JSON","parse","initState","loggedIn","authentication","state","action","type","loggingIn","payload","error"],"mappings":"AAAA;AACA,SACEA,kBADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,WAJF,QAKO,cALP,C,CAOA;;AAGA,IAAIC,IAAiB,GAAG,IAAxB,C,CAEA;;AACA,MAAMC,WAA0B,GAC9BC,YAAY,CAACC,OAAb,CAAqB,MAArB,KAAgCC,cAAc,CAACD,OAAf,CAAuB,MAAvB,CADlC,C,CAGA;;AACAH,IAAI,GAAGC,WAAW,GAAGI,IAAI,CAACC,KAAL,CAAWL,WAAX,CAAH,GAA6B,IAA/C;AAEA,MAAMM,SAAoB,GAAGP,IAAI,GAAG;AAAEQ,EAAAA,QAAQ,EAAE,IAAZ;AAAkBR,EAAAA;AAAlB,CAAH,GAA8B,EAA/D,C,CAEA;;AACA,MAAMS,cAAc,GAAG,CACrBC,KAAK,GAAGH,SADa,EAErBI,MAFqB,KAGP;AACd,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKf,kBAAL;AACE,aAAO;AACLgB,QAAAA,SAAS,EAAE;AADN,OAAP;;AAGF,SAAKf,kBAAL;AACE,aAAO;AACLU,QAAAA,QAAQ,EAAE,IADL;AAELR,QAAAA,IAAI,EAAEW,MAAM,CAACG;AAFR,OAAP;;AAIF,SAAKlB,kBAAL;AACE,aAAO;AACLY,QAAAA,QAAQ,EAAE,KADL;AAELO,QAAAA,KAAK,EAAEJ,MAAM,CAACG;AAFT,OAAP;;AAIF,SAAKf,WAAL;AACE,aAAO;AACLS,QAAAA,QAAQ,EAAE;AADL,OAAP;;AAGF;AACE,aAAOE,KAAP;AApBJ;AAsBD,CA1BD;;AA4BA,eAAeD,cAAf","sourcesContent":["// constants\nimport {\n  USER_LOGIN_FAILURE,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT\n} from \"../constants\";\n\n// types\nimport { User, AuthActionTypes, AuthState } from \"../types\";\n\nlet user: User | null = null;\n\n// check if user exists in the storages\nconst userStorage: string | null =\n  localStorage.getItem(\"user\") || sessionStorage.getItem(\"user\");\n\n// if user does not exists user = null\nuser = userStorage ? JSON.parse(userStorage) : null;\n\nconst initState: AuthState = user ? { loggedIn: true, user } : {};\n\n// authentication reducer\nconst authentication = (\n  state = initState,\n  action: AuthActionTypes\n): AuthState => {\n  switch (action.type) {\n    case USER_LOGIN_REQUEST:\n      return {\n        loggingIn: true\n      };\n    case USER_LOGIN_SUCCESS:\n      return {\n        loggedIn: true,\n        user: action.payload\n      };\n    case USER_LOGIN_FAILURE:\n      return {\n        loggedIn: false,\n        error: action.payload\n      };\n    case USER_LOGOUT:\n      return {\n        loggedIn: false\n      };\n    default:\n      return state;\n  }\n};\n\nexport default authentication;\n"]},"metadata":{},"sourceType":"module"}