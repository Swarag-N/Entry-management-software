{"ast":null,"code":"// constants\nimport { USER_LOGIN_FAILURE, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAILURE, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants\"; // services\n\nimport { userService } from \"../services\"; // helpers\n\nimport { history } from \"../helpers\";\n\n// user login action\nconst login = ({\n  email,\n  name,\n  phone,\n  remember = false\n}) => {\n  return (dispatch, useState) => {\n    // logging in\n    dispatch(request()); // send login request to server\n\n    userService.login({\n      email,\n      name,\n      phone,\n      remember\n    }).then(user => {\n      // login was successful\n      dispatch(success(user));\n      history.push(\"/dashboard\");\n    }, error => {\n      // login failed\n      alert(error);\n      console.log(error);\n      dispatch(failure(error));\n    });\n\n    function request() {\n      return {\n        type: USER_LOGIN_REQUEST\n      };\n    }\n\n    function success(user) {\n      return {\n        type: USER_LOGIN_SUCCESS,\n        payload: user\n      };\n    }\n\n    function failure(error) {\n      return {\n        type: USER_LOGIN_FAILURE,\n        payload: error\n      };\n    }\n  };\n}; // user register action\n\n\nconst register = ({\n  fullName,\n  Hostemail,\n  Hostphone\n}) => {\n  return (dispatch, useState) => {\n    // logging in\n    dispatch(request()); // send login request to server\n\n    userService.register({\n      fullName,\n      Hostemail,\n      Hostphone\n    }).then(() => {\n      // register was successful\n      dispatch(success());\n      window.location.reload(true);\n    }, error => {\n      // register failed\n      alert(error);\n      dispatch(failure(error));\n    });\n\n    function request() {\n      return {\n        type: USER_REGISTER_REQUEST\n      };\n    }\n\n    function success() {\n      return {\n        type: USER_REGISTER_SUCCESS\n      };\n    }\n\n    function failure(error) {\n      return {\n        type: USER_REGISTER_FAILURE,\n        payload: error\n      };\n    }\n  };\n}; // user logout action\n\n\nconst logout = () => {\n  userService.logout();\n  history.push(\"/\");\n  return {\n    type: USER_LOGOUT\n  };\n};\n\nexport const userActions = {\n  login,\n  register,\n  logout\n};","map":{"version":3,"sources":["/mnt/sda1/Documents/react-redux-login-signup-form/src/actions/user.action.ts"],"names":["USER_LOGIN_FAILURE","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAILURE","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","userService","history","login","email","name","phone","remember","dispatch","useState","request","then","user","success","push","error","alert","console","log","failure","type","payload","register","fullName","Hostemail","Hostphone","window","location","reload","logout","userActions"],"mappings":"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","sourcesContent":["// constants\nimport {\n  USER_LOGIN_FAILURE,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAILURE,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS\n} from \"../constants\";\n\n// services\nimport { userService } from \"../services\";\n\n// helpers\nimport { history } from \"../helpers\";\nimport { renderLoginFrom } from \"../components/pages/LoginSignup\";\n// types\nimport { Dispatch } from \"redux\";\nimport { AppActions, User } from \"../types\";\nimport { AppState } from \"../reducers\";\n\nimport { SignupForm } from \"../components/SignupForm\";\n// user login action\nconst login = ({\n  email,\n  name,\n  phone,\n  remember = false\n}: {\n  email: string;\n  name: string;\n  phone: string;\n  remember?: boolean;\n}) => {\n  return (dispatch: Dispatch<AppActions>, useState: () => AppState) => {\n    // logging in\n    dispatch(request());\n\n    // send login request to server\n    userService.login({ email, name, phone, remember }).then(\n      user => {\n        // login was successful\n        dispatch(success(user));\n        history.push(\"/dashboard\");\n      },\n      error => {\n        // login failed\n        alert(error);\n        console.log(error);\n        dispatch(failure(error));\n        \n      }\n    );\n\n    function request(): AppActions {\n      return { type: USER_LOGIN_REQUEST };\n    }\n    function success(user: User): AppActions {\n      return { type: USER_LOGIN_SUCCESS, payload: user };\n    }\n    function failure(error: any): AppActions {\n      return { type: USER_LOGIN_FAILURE, payload: error };\n    }\n  };\n};\n\n// user register action\nconst register = ({\n  fullName,\n  Hostemail,\n  Hostphone\n}: {\n  fullName: string;\n  Hostemail: string;\n  Hostphone: string;\n}) => {\n  return (dispatch: Dispatch<AppActions>, useState: () => AppState) => {\n    // logging in\n    dispatch(request());\n\n    // send login request to server\n    userService.register({ fullName, Hostemail, Hostphone }).then(\n      () => {\n        // register was successful\n        dispatch(success());\n        window.location.reload(true);\n      },\n      error => {\n        // register failed\n        alert(error);\n        dispatch(failure(error));\n      }\n    );\n\n    function request(): AppActions {\n      return { type: USER_REGISTER_REQUEST };\n    }\n    function success(): AppActions {\n      return { type: USER_REGISTER_SUCCESS };\n    }\n    function failure(error: any): AppActions {\n      return { type: USER_REGISTER_FAILURE, payload: error };\n    }\n  };\n};\n\n// user logout action\nconst logout = () => {\n  userService.logout();\n  history.push(\"/\");\n  return { type: USER_LOGOUT };\n};\n\nexport const userActions: any = {\n  login,\n  register,\n  logout\n};\n"]},"metadata":{},"sourceType":"module"}