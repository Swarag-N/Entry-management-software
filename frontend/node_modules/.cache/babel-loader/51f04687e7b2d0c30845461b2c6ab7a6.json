{"ast":null,"code":"// constants\nimport { USER_LOGIN_FAILURE, USER_LOGIN_REQUEST, USER_LOGIN_SUCCESS, USER_LOGOUT, USER_REGISTER_FAILURE, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants\"; // services\n\nimport { userService } from \"../services\"; // helpers\n\nimport { history } from \"../helpers\";\n\n// user login action\nconst login = ({\n  email,\n  name,\n  phone,\n  remember = false\n}) => {\n  history.push(\"/dashboard\");\n};\n\nfunction request() {\n  return {\n    type: USER_LOGIN_REQUEST\n  };\n}\n\nfunction success(user) {\n  return {\n    type: USER_LOGIN_SUCCESS,\n    payload: user\n  };\n}\n\nfunction failure(error) {\n  return {\n    type: USER_LOGIN_FAILURE,\n    payload: error\n  };\n} // user register action\n\n\nconst register = ({\n  fullName,\n  email,\n  password\n}) => {\n  return (dispatch, useState) => {\n    // logging in\n    dispatch(request()); // send login request to server\n\n    userService.register({\n      fullName,\n      email,\n      password\n    }).then(() => {\n      // register was successful\n      dispatch(success());\n      window.location.reload(true);\n    }, error => {\n      // register failed\n      alert(error);\n      dispatch(failure(error));\n    });\n\n    function request() {\n      return {\n        type: USER_REGISTER_REQUEST\n      };\n    }\n\n    function success() {\n      return {\n        type: USER_REGISTER_SUCCESS\n      };\n    }\n\n    function failure(error) {\n      return {\n        type: USER_REGISTER_FAILURE,\n        payload: error\n      };\n    }\n  };\n}; // user logout action\n\n\nconst logout = () => {\n  userService.logout();\n  history.push(\"/\");\n  return {\n    type: USER_LOGOUT\n  };\n};\n\nexport const userActions = {\n  login,\n  register,\n  logout\n};","map":{"version":3,"sources":["/mnt/sda1/Documents/react-redux-login-signup-form/src/actions/user.action.ts"],"names":["USER_LOGIN_FAILURE","USER_LOGIN_REQUEST","USER_LOGIN_SUCCESS","USER_LOGOUT","USER_REGISTER_FAILURE","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","userService","history","login","email","name","phone","remember","push","request","type","success","user","payload","failure","error","register","fullName","password","dispatch","useState","then","window","location","reload","alert","logout","userActions"],"mappings":"AAAA;AACA,SACEA,kBADF,EAEEC,kBAFF,EAGEC,kBAHF,EAIEC,WAJF,EAKEC,qBALF,EAMEC,qBANF,EAOEC,qBAPF,QAQO,cARP,C,CAUA;;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CAEA;;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAOA;AACA,MAAMC,KAAK,GAAG,CAAC;AACbC,EAAAA,KADa;AAEbC,EAAAA,IAFa;AAGbC,EAAAA,KAHa;AAIbC,EAAAA,QAAQ,GAAG;AAJE,CAAD,KAUR;AAEEL,EAAAA,OAAO,CAACM,IAAR,CAAa,YAAb;AACD,CAbP;;AAeI,SAASC,OAAT,GAA+B;AAC7B,SAAO;AAAEC,IAAAA,IAAI,EAAEf;AAAR,GAAP;AACD;;AACD,SAASgB,OAAT,CAAiBC,IAAjB,EAAyC;AACvC,SAAO;AAAEF,IAAAA,IAAI,EAAEd,kBAAR;AAA4BiB,IAAAA,OAAO,EAAED;AAArC,GAAP;AACD;;AACD,SAASE,OAAT,CAAiBC,KAAjB,EAAyC;AACvC,SAAO;AAAEL,IAAAA,IAAI,EAAEhB,kBAAR;AAA4BmB,IAAAA,OAAO,EAAEE;AAArC,GAAP;AACD,C,CAEL;;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAChBC,EAAAA,QADgB;AAEhBb,EAAAA,KAFgB;AAGhBc,EAAAA;AAHgB,CAAD,KAQX;AACJ,SAAO,CAACC,QAAD,EAAiCC,QAAjC,KAA8D;AACnE;AACAD,IAAAA,QAAQ,CAACV,OAAO,EAAR,CAAR,CAFmE,CAInE;;AACAR,IAAAA,WAAW,CAACe,QAAZ,CAAqB;AAAEC,MAAAA,QAAF;AAAYb,MAAAA,KAAZ;AAAmBc,MAAAA;AAAnB,KAArB,EAAoDG,IAApD,CACE,MAAM;AACJ;AACAF,MAAAA,QAAQ,CAACR,OAAO,EAAR,CAAR;AACAW,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACD,KALH,EAMET,KAAK,IAAI;AACP;AACAU,MAAAA,KAAK,CAACV,KAAD,CAAL;AACAI,MAAAA,QAAQ,CAACL,OAAO,CAACC,KAAD,CAAR,CAAR;AACD,KAVH;;AAaA,aAASN,OAAT,GAA+B;AAC7B,aAAO;AAAEC,QAAAA,IAAI,EAAEX;AAAR,OAAP;AACD;;AACD,aAASY,OAAT,GAA+B;AAC7B,aAAO;AAAED,QAAAA,IAAI,EAAEV;AAAR,OAAP;AACD;;AACD,aAASc,OAAT,CAAiBC,KAAjB,EAAyC;AACvC,aAAO;AAAEL,QAAAA,IAAI,EAAEZ,qBAAR;AAA+Be,QAAAA,OAAO,EAAEE;AAAxC,OAAP;AACD;AACF,GA3BD;AA4BD,CArCD,C,CAuCA;;;AACA,MAAMW,MAAM,GAAG,MAAM;AACnBzB,EAAAA,WAAW,CAACyB,MAAZ;AACAxB,EAAAA,OAAO,CAACM,IAAR,CAAa,GAAb;AACA,SAAO;AAAEE,IAAAA,IAAI,EAAEb;AAAR,GAAP;AACD,CAJD;;AAMA,OAAO,MAAM8B,WAAgB,GAAG;AAC9BxB,EAAAA,KAD8B;AAE9Ba,EAAAA,QAF8B;AAG9BU,EAAAA;AAH8B,CAAzB","sourcesContent":["// constants\nimport {\n  USER_LOGIN_FAILURE,\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGOUT,\n  USER_REGISTER_FAILURE,\n  USER_REGISTER_REQUEST,\n  USER_REGISTER_SUCCESS\n} from \"../constants\";\n\n// services\nimport { userService } from \"../services\";\n\n// helpers\nimport { history } from \"../helpers\";\nimport { renderLoginFrom } from \"../components/pages/LoginSignup\";\n// types\nimport { Dispatch } from \"redux\";\nimport { AppActions, User } from \"../types\";\nimport { AppState } from \"../reducers\";\n\n// user login action\nconst login = ({\n  email,\n  name,\n  phone,\n  remember = false\n}: {\n  email: string;\n  name: string;\n  phone: string;\n  remember?: boolean;\n}) => {\n \n        history.push(\"/dashboard\");\n      };\n    \n    function request(): AppActions {\n      return { type: USER_LOGIN_REQUEST };\n    }\n    function success(user: User): AppActions {\n      return { type: USER_LOGIN_SUCCESS, payload: user };\n    }\n    function failure(error: any): AppActions {\n      return { type: USER_LOGIN_FAILURE, payload: error };\n    }\n\n// user register action\nconst register = ({\n  fullName,\n  email,\n  password\n}: {\n  fullName: string;\n  email: string;\n  password: string;\n}) => {\n  return (dispatch: Dispatch<AppActions>, useState: () => AppState) => {\n    // logging in\n    dispatch(request());\n\n    // send login request to server\n    userService.register({ fullName, email, password }).then(\n      () => {\n        // register was successful\n        dispatch(success());\n        window.location.reload(true);\n      },\n      error => {\n        // register failed\n        alert(error);\n        dispatch(failure(error));\n      }\n    );\n\n    function request(): AppActions {\n      return { type: USER_REGISTER_REQUEST };\n    }\n    function success(): AppActions {\n      return { type: USER_REGISTER_SUCCESS };\n    }\n    function failure(error: any): AppActions {\n      return { type: USER_REGISTER_FAILURE, payload: error };\n    }\n  };\n};\n\n// user logout action\nconst logout = () => {\n  userService.logout();\n  history.push(\"/\");\n  return { type: USER_LOGOUT };\n};\n\nexport const userActions: any = {\n  login,\n  register,\n  logout\n};\n"]},"metadata":{},"sourceType":"module"}