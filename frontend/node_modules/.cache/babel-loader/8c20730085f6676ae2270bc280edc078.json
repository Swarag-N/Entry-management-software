{"ast":null,"code":"// types\nconst login = ({\n  email,\n  name,\n  phone\n}) => {\n  const config = {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    redirect: \"follow\",\n    referrer: \"no-referrer\",\n    body: JSON.stringify({\n      email,\n      name,\n      phone\n    })\n  }; // send request to auth server if succesfull save user into local storage or session storage based on user choice\n\n  return fetch(\"http://localhost:5000/api/login\", config).then(handleResponse).then(user => {\n    // if user selected remember me save in local storage else in a session storage\n    return user;\n  });\n};\n\nfunction register({\n  fullName,\n  Hostemail,\n  Hostphone\n}) {\n  const config = {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    redirect: \"follow\",\n    referrer: \"no-referrer\",\n    body: JSON.stringify({\n      fullName,\n      Hostemail,\n      Hostphone\n    })\n  };\n  return fetch(\"http://localhost:5000/api/user\", config).then(handleResponse);\n}\n\nconst logout = () => {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n  sessionStorage.removeItem(\"user\");\n};\n\nconst handleResponse = response => {\n  return response.text().then(text => {\n    console.log(text);\n    const data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload(true);\n      }\n\n      const error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nexport const userService = {\n  login,\n  register,\n  logout\n};","map":{"version":3,"sources":["/mnt/sda1/Documents/react-redux-login-signup-form/src/services/user.service.ts"],"names":["login","email","name","phone","config","method","mode","cache","headers","redirect","referrer","body","JSON","stringify","fetch","then","handleResponse","user","register","fullName","Hostemail","Hostphone","credentials","logout","localStorage","removeItem","sessionStorage","response","text","console","log","data","parse","ok","status","window","location","reload","error","message","statusText","Promise","reject","userService"],"mappings":"AAAA;AAGA,MAAMA,KAAK,GAAG,CAAC;AACbC,EAAAA,KADa;AAEbC,EAAAA,IAFa;AAGbC,EAAAA;AAHa,CAAD,KAUO;AACnB,QAAMC,MAAmB,GAAG;AAC1BC,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,IAAI,EAAE,MAFoB;AAG1BC,IAAAA,KAAK,EAAE,UAHmB;AAI1BC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAJiB;AAO1BC,IAAAA,QAAQ,EAAE,QAPgB;AAQ1BC,IAAAA,QAAQ,EAAE,aARgB;AAS1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEZ,MAAAA,KAAF;AAASC,MAAAA,IAAT;AAAeC,MAAAA;AAAf,KAAf;AAToB,GAA5B,CADmB,CAanB;;AACA,SAAOW,KAAK,CAAC,iCAAD,EAAoCV,MAApC,CAAL,CACJW,IADI,CACCC,cADD,EAEJD,IAFI,CAEEE,IAAD,IAAgB;AACpB;AAEA,WAAOA,IAAP;AACD,GANI,CAAP;AAOD,CA/BD;;AAiCA,SAASC,QAAT,CAAkB;AAChBC,EAAAA,QADgB;AAEhBC,EAAAA,SAFgB;AAGhBC,EAAAA;AAHgB,CAAlB,EAQG;AACD,QAAMjB,MAAmB,GAAG;AAC1BC,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,IAAI,EAAE,MAFoB;AAG1BC,IAAAA,KAAK,EAAE,UAHmB;AAI1Be,IAAAA,WAAW,EAAE,aAJa;AAK1Bd,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KALiB;AAQ1BC,IAAAA,QAAQ,EAAE,QARgB;AAS1BC,IAAAA,QAAQ,EAAE,aATgB;AAU1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEM,MAAAA,QAAF;AAAYC,MAAAA,SAAZ;AAAuBC,MAAAA;AAAvB,KAAf;AAVoB,GAA5B;AAYA,SAAOP,KAAK,CAAC,gCAAD,EAAmCV,MAAnC,CAAL,CAAgDW,IAAhD,CAAqDC,cAArD,CAAP;AACD;;AAED,MAAMO,MAAM,GAAG,MAAY;AACzB;AACAC,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACAC,EAAAA,cAAc,CAACD,UAAf,CAA0B,MAA1B;AACD,CAJD;;AAMA,MAAMT,cAAc,GAAIW,QAAD,IAA6B;AAClD,SAAOA,QAAQ,CAACC,IAAT,GAAgBb,IAAhB,CAAqBa,IAAI,IAAI;AAClCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAMG,IAAI,GAAGH,IAAI,IAAIhB,IAAI,CAACoB,KAAL,CAAWJ,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACM,EAAd,EAAkB;AAChB,UAAIN,QAAQ,CAACO,MAAT,KAAoB,GAAxB,EAA6B;AAC3B;AACAX,QAAAA,MAAM;AACNY,QAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,IAAvB;AACD;;AAED,YAAMC,KAAK,GAAIP,IAAI,IAAIA,IAAI,CAACQ,OAAd,IAA0BZ,QAAQ,CAACa,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD;;AAED,WAAOP,IAAP;AACD,GAfM,CAAP;AAgBD,CAjBD;;AAmBA,OAAO,MAAMY,WAAW,GAAG;AACzB3C,EAAAA,KADyB;AAEzBkB,EAAAA,QAFyB;AAGzBK,EAAAA;AAHyB,CAApB","sourcesContent":["// types\nimport { User } from \"../types\";\n\nconst login = ({\n  email,\n  name,\n  phone,\n \n}: {\n  email: string;\n  name: string;\n  phone: string;\n  \n}): Promise<User> => {\n  const config: RequestInit = {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    redirect: \"follow\",\n    referrer: \"no-referrer\",\n    body: JSON.stringify({ email, name, phone })\n  };\n\n  // send request to auth server if succesfull save user into local storage or session storage based on user choice\n  return fetch(\"http://localhost:5000/api/login\", config)\n    .then(handleResponse)\n    .then((user: User) => {\n      // if user selected remember me save in local storage else in a session storage\n      \n      return user;\n    });\n};\n\nfunction register({\n  fullName,\n  Hostemail,\n  Hostphone\n}: {\n  fullName: string;\n  Hostemail: string;\n  Hostphone: string;\n}) {\n  const config: RequestInit = {\n    method: \"POST\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    credentials: \"same-origin\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    redirect: \"follow\",\n    referrer: \"no-referrer\",\n    body: JSON.stringify({ fullName, Hostemail, Hostphone })\n  };\n  return fetch(\"http://localhost:5000/api/user\", config).then(handleResponse);\n}\n\nconst logout = (): void => {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n  sessionStorage.removeItem(\"user\");\n};\n\nconst handleResponse = (response: Response): any => {\n  return response.text().then(text => {\n    console.log(text);\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n};\n\nexport const userService = {\n  login,\n  register,\n  logout\n};\n"]},"metadata":{},"sourceType":"module"}